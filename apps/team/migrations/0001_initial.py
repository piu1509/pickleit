# Generated by Django 5.1 on 2024-08-20 06:29

import apps.team.models
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LeaguesPesrsonType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LeaguesTeamType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Leagues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('leagues_start_date', models.DateTimeField(blank=True, null=True)),
                ('leagues_end_date', models.DateTimeField(blank=True, null=True)),
                ('registration_start_date', models.DateTimeField(blank=True, null=True)),
                ('registration_end_date', models.DateTimeField(blank=True, null=True)),
                ('registration_fee', models.IntegerField(default=5)),
                ('others_fees', models.JSONField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='tournament_image/')),
                ('description', models.TextField(default="Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type")),
                ('play_type', models.CharField(blank=True, choices=[('Group Stage', 'Group Stage'), ('Round Robin', 'Round Robin'), ('Single Elimination', 'Single Elimination'), ('Individual Match Play', 'Individual Match Play')], max_length=255, null=True)),
                ('max_number_team', models.PositiveIntegerField(default=2)),
                ('location', models.TextField(blank=True, help_text='location', null=True)),
                ('street', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.DecimalField(decimal_places=6, default=38.908683, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, default=-76.937352, max_digits=9)),
                ('complete_address', models.TextField(blank=True, help_text='street, city, state, country, PIN-postal_code', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('league_type', models.CharField(blank=True, choices=[('Invites only', 'Invites only'), ('Open to all', 'Open to all')], max_length=200, null=True)),
                ('invited_code', models.CharField(blank=True, max_length=6, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('is_disabled', models.BooleanField(default=False)),
                ('is_created', models.BooleanField(default=True)),
                ('any_rank', models.BooleanField(default=True)),
                ('start_rank', models.FloatField(blank=True, null=True)),
                ('end_rank', models.FloatField(blank=True, null=True)),
                ('add_organizer', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_createdUserBy', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_updatedUserBy', to=settings.AUTH_USER_MODEL)),
                ('team_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_pesrson_type', to='team.leaguespesrsontype')),
                ('team_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_team_type', to='team.leaguesteamtype')),
            ],
        ),
        migrations.CreateModel(
            name='LeaguesPlayType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(choices=[('Group Stage', 'Group Stage'), ('Round Robin', 'Round Robin'), ('Single Elimination', 'Single Elimination'), ('Individual Match Play', 'Individual Match Play')], max_length=255)),
                ('data', models.JSONField(default=apps.team.models.default_json)),
                ('league_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.leagues')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentDetailsForRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_for', models.CharField(max_length=255)),
                ('teams_ids', models.JSONField(blank=True, null=True)),
                ('charge_amount', models.FloatField(null=True)),
                ('payment_status', models.BooleanField(default=False)),
                ('payment_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_made', to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_details', to='team.leagues')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('name', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('location', models.CharField(blank=True, max_length=250, null=True)),
                ('team_person', models.CharField(blank=True, choices=[('Two Person Team', 'Two Person Team'), ('One Person Team', 'One Person Team')], max_length=250, null=True)),
                ('team_image', models.ImageField(blank=True, null=True, upload_to='team_image/')),
                ('team_type', models.CharField(blank=True, choices=[('Women', 'Women'), ('Men', 'Men'), ('Co-ed', 'Co-ed'), ('Open-team', 'Open-team')], max_length=250, null=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_disabled', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teamCreatedBy', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teamUpdatedBy', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SaveLeagues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('ch_league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ch_league', to='team.leagues')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='save_turnamenet_user', to=settings.AUTH_USER_MODEL)),
                ('ch_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ch_team', to='team.team')),
            ],
        ),
        migrations.CreateModel(
            name='RoundRobinGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('court', models.CharField(blank=True, max_length=255, null=True)),
                ('number_sets', models.IntegerField(blank=True, null=True)),
                ('all_games_status', models.BooleanField(default=False)),
                ('league_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_for', to='team.leagues')),
                ('all_teams', models.ManyToManyField(to='team.team')),
                ('seleced_teams', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seleced_teams', to='team.team')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('var_team_name', models.CharField(blank=True, max_length=250, null=True)),
                ('var_team_person', models.CharField(blank=True, max_length=250, null=True)),
                ('player_image', models.ImageField(blank=True, null=True, upload_to='player_image/')),
                ('player_first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('player_last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('player_full_name', models.CharField(blank=True, max_length=250, null=True)),
                ('player_email', models.EmailField(blank=True, max_length=250, null=True)),
                ('player_phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('player_ranking', models.CharField(blank=True, default='1', max_length=255, null=True)),
                ('player_rank_lock', models.BooleanField(default=False)),
                ('identify_player', models.CharField(blank=True, max_length=250, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='playerCreatedBy', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='playerUpdatedBy', to=settings.AUTH_USER_MODEL)),
                ('team', models.ManyToManyField(to='team.team')),
            ],
        ),
        migrations.AddField(
            model_name='leagues',
            name='registered_team',
            field=models.ManyToManyField(to='team.team'),
        ),
        migrations.AddField(
            model_name='leagues',
            name='winner_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winner_team_for_all_league', to='team.team'),
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('secret_key', models.CharField(max_length=250, unique=True)),
                ('match_number', models.IntegerField(null=True)),
                ('winner_team_score', models.CharField(blank=True, max_length=250, null=True)),
                ('loser_team_score', models.CharField(blank=True, max_length=250, null=True)),
                ('play_ground_name', models.CharField(blank=True, max_length=250, null=True)),
                ('playing_date_time', models.DateTimeField(blank=True, null=True)),
                ('match_type', models.CharField(blank=True, max_length=250, null=True)),
                ('elimination_round', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('court_sn', models.IntegerField(blank=True, null=True)),
                ('court_real', models.IntegerField(blank=True, null=True)),
                ('is_drow', models.BooleanField(default=False)),
                ('set_number', models.IntegerField(blank=True, null=True)),
                ('court_num', models.IntegerField(blank=True, null=True)),
                ('points', models.IntegerField(blank=True, null=True)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group', to='team.roundrobingroup')),
                ('leagues', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues', to='team.leagues')),
                ('loser_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loser_team', to='team.team')),
                ('team1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team1', to='team.team')),
                ('team2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team2', to='team.team')),
                ('winner_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winner_team', to='team.team')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentSetsResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('set_number', models.IntegerField()),
                ('team1_point', models.IntegerField()),
                ('team2_point', models.IntegerField()),
                ('is_completed', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tournament', to='team.tournament')),
                ('win_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='win_team', to='team.team')),
            ],
        ),
    ]
