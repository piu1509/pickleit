"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_KEY = os.getenv('SECRET_KEY')

# STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
# STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')

STRIPE_PUBLIC_KEY = 'pk_test_ceE9AJ99mz5febdoTmcq5C38'
STRIPE_SECRET_KEY = 'sk_test_Uw0pOrG2d2LwQT18Ielu6Gqk'


# S3 Bucket credentials
ACCESS_KEY_ID = os.getenv('ACCESS_KEY_ID')
SECRET_ACCESS_KEY = os.getenv('SECRET_ACCESS_KEY')
BUCKET_NAME = os.getenv('BUCKET_NAME')
FOLDER_NAME = os.getenv('FOLDER_NAME')

# MAP_API_KEY = os.getenv('MAP_API_KEY')
MAP_API_KEY = 'AIzaSyAfBo6-cZlOpKGrD1ZYwISIGjYvhH_wPmk'

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
PROTOCALL = 'https'
SITE_URL = 'https://dev.pickleit.app/user_side'
CLUB_PERCENTAGE = 90
ADMIN_PERCENTAGE_CLUB = 10
DEBUG = True
# DEBUG = False
# ALLOWED_HOSTS = [ "dev.pickleit.app", "*" ]

ALLOWED_HOSTS = ["*"]

APP_NAME = "Pickleit"
# APP_NAME = "Pickleit"

STREAM_API_KEY = "rngscpebarrr"
STREAM_API_SECRET = "6ju2av4vzs4tm5gq5tb4rrxcnj7ga5eqszafysmfw8hqh88uhtqctrm8bqgqudfy"
TWILIO_ACCOUNT_SID =  'AC9e79e1a9bccb347c806f330364983516'
TWILIO_AUTH_TOKEN = "a75ffbdfcd7f94495e3ba7507f3dc449"
TWILIO_PHONE_NUMBER = "+18777804236"
TWILIO_VERIFY_SERVICE_SID = "VAda61207e502b7b22ea76d777f506d472"


PER_DAY_CHARGE_FOR_AD = os.getenv('PER_DAY_CHARGE_FOR_AD')

### team registration
ORGANIZER_PERCENTAGE = 90
ADMIN_PERCENTAGE = 10

# ### club join
# CLUB_PERCENTAGE = 90
# ADMIN_PERCENTAGE_CLUB = 10

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'daphne',
    'channels',
    'channels_redis',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'phonenumber_field',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'apps.user',
    'apps.team',
    'apps.pickleitcollection',
    'apps.chat',
    'apps.admin_side',
    'apps.socialfeed',
    'apps.store',
    'apps.courts',
    'apps.clubs',
    'apps.user_side'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'apps.user.middleware.CurrentUserMiddleware'
]

CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = ['https://dev.pickleit.app', 'wss://dev.pickleit.app']

CORS_ALLOWED_ORIGINS = [
    "https://dev.pickleit.app",
    "wss://dev.pickleit.app"
    # "http://52.15.158.49:8001",
    # Add more origins as needed
]

# CORS_ALLOWED_ORIGINS = [
#     "https://dev.pickleit.app",
#     # Add more trusted origins as needed
# ]


ROOT_URLCONF = 'myproject.urls'


STATIC_URL = '/static/'
# # STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# STATIC_ROOT = BASE_DIR / 'static'

# STATIC_URL = 'static/'


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

TEMPLATE_DIRS = [ BASE_DIR / "templates"]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': TEMPLATE_DIRS,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]









# import os

# # Assuming BASE_DIR is defined somewhere above this configuration
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Adjust if necessary

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# TEMPLATE_DIRS = [os.path.join(BASE_DIR, "templates")]

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': TEMPLATE_DIRS,
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

WSGI_APPLICATION = 'myproject.wsgi.application'
ASGI_APPLICATION = 'myproject.asgi.application'


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CACHE_TTL = 60 * 60

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": "python_db",
#         "USER": "python_usr",
#         "PASSWORD": "8gWQC5bAyKwiBSXH",
#         "HOST": "127.0.0.1",
#         "PORT": "5432",
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


AUTH_USER_MODEL = "user.User"

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'error.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
